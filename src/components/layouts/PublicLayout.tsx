import { SignIn, SignInButton, SignOutButton, useUser } from "@clerk/nextjs";
import Head from "next/head";
import Link from "next/link";
import { Dispatch, ReactNode, SetStateAction, useState } from "react";
import ToggleTheme from "../shared/ToggleTheme";
import { Inter } from "next/font/google";
import { HomeIcon } from "../shared/icons/home";
import { ExpandIcon } from "../shared/icons/expand";
import { CollapseIcon } from "../shared/icons/collapse";

// export default function PublicLayout({
//   children,
// }: {
//   children: React.ReactNode;
// }) {
//   const [theme, setTheme] = useState("light");

//   const user = useUser();

//   const { isLoaded: userLoaded } = useUser();

//   return (
//     <div className={`bg-darkBg100`}>
//       <Head>
//         <title>Realty-Hub</title>
//         <meta name="description" content="Generated by create-t3-app" />
//         <link rel="icon" href="/favicon.ico" />
//       </Head>
//       <nav className="flex">
//         <NavButtons userLoaded={userLoaded} />
//         <div className="account-manager flex-3 flex-inital mx-4 flex w-32 justify-around">
//           {userLoaded && user.isSignedIn ? <SignOutButton /> : <SignInButton />}
//         </div>
//         <ToggleTheme theme={theme} setTheme={setTheme} />
//       </nav>
//       <main>{children}</main>
//       <footer></footer>
//     </div>
//   );
// }

// interface ButtonProps {
//   userLoaded: boolean;
// }

// function NavButtons(props: ButtonProps) {
//   const { userLoaded } = props;

//   const user = useUser();

//   return (
//     <>
//       <div className="logo-container ml-4 flex flex-none">
//         <Link href="/">
//           <svg
//             xmlns="http://www.w3.org/2000/svg"
//             viewBox="0 0 24 24"
//             fill="currentColor"
//             className="h-6 w-6 text-primary200"
//           >
//             <path d="M11.47 3.84a.75.75 0 011.06 0l8.69 8.69a.75.75 0 101.06-1.06l-8.689-8.69a2.25 2.25 0 00-3.182 0l-8.69 8.69a.75.75 0 001.061 1.06l8.69-8.69z" />
//             <path d="M12 5.432l8.159 8.159c.03.03.06.058.091.086v6.198c0 1.035-.84 1.875-1.875 1.875H15a.75.75 0 01-.75-.75v-4.5a.75.75 0 00-.75-.75h-3a.75.75 0 00-.75.75V21a.75.75 0 01-.75.75H5.625a1.875 1.875 0 01-1.875-1.875v-6.198a2.29 2.29 0 00.091-.086L12 5.43z" />
//           </svg>
//         </Link>
//       </div>
//       <div className="std-navigation flex flex-1 justify-around">
//         <Link href="/" className="hover:underline">
//           home
//         </Link>
//         <Link href="/articles" className="hover:underline">
//           articles
//         </Link>
//         <Link href="/public/calculator" className="hover:underline">
//           calculator
//         </Link>
//         {userLoaded && user.isSignedIn && <Link href="user/">Dashboard</Link>}
//       </div>
//     </>
//   );
// }

const inter = Inter({ subsets: ["latin"] });

interface LargeNavProps {
  setDropDownOption: Dispatch<SetStateAction<string>>;
  dropDownOption: string;
  setActiveDropDown: Dispatch<SetStateAction<boolean>>;
  activeDropDown: boolean;
}

type Mini = "expanded" | "collapsed";
interface MiniNav {
  setDropDownOption: Dispatch<SetStateAction<string>>;
  dropDownOption: string;
  setActiveDropDown: Dispatch<SetStateAction<boolean>>;
  activeDropDown: boolean;
  mini: Mini;
  setMini: Dispatch<SetStateAction<Mini>>;
  navOpt?: ReactNode;
}

export default function PublicLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  const [activeDropDown, setActiveDropDown] = useState(false);
  const [dropDownOption, setDropDownOption] = useState("");
  const [mini, setMini] = useState<Mini>("collapsed");

  return (
    <div
      className={`min-h-screen ${inter.className} text-black transition-colors duration-500 dark:bg-darkBg100 dark:text-white`}
    >
      <div className="">
        <LargeNav />
        <MiniNav mini={mini} setMini={setMini} />
      </div>
      <main
        onMouseEnter={() => {
          setActiveDropDown(false);
          setDropDownOption("");
        }}
      >
        {children}
      </main>
      <footer></footer>
    </div>
  );
}

function LargeNavButtons() {
  return (
    <>
      <div className="std-navigation flex flex-1 flex-col last:pb-0 md:flex-row [&>button]:pb-2 [&>button]:md:pb-0">
        <div className="flex flex-1"></div>
        <Link href="/">Home</Link>
        <div className="flex flex-1"></div>
        <Link href="/public/calculator">Calculator</Link>
        <div className="flex flex-1"></div>
        <Link href="/articles">Articles</Link>
        <div className="flex flex-1"></div>
      </div>
    </>
  );
}

function LargeNav() {
  const user = useUser();
  const [theme, setTheme] = useState("light");

  return (
    <nav className="hidden h-14 px-4 md:flex">
      <HomeIcon />
      <LargeNavButtons />
      <div className="account-manager mx-4 flex justify-around">
        <div className="sign-out-btn w-42 ml-8">
          {user.isLoaded && user.isSignedIn ? (
            <>
              <Link href="/user/dashboard">Dashboard</Link>
              <SignOutButton />
            </>
          ) : (
            <SignInButton />
          )}
        </div>
      </div>
      <ToggleTheme theme={theme} setTheme={setTheme} />
    </nav>
  );
}

function MiniNavButtons() {
  const user = useUser();

  return (
    <>
      <div className="std-navigation flex flex-1 flex-col last:pb-0 md:flex-row [&>button]:pb-2 [&>button]:md:pb-0">
        <div className="mb-2 flex w-full justify-center">
          <Link href="/">Home</Link>
        </div>
        <div className="mb-2 flex w-full">
          <div className="flex h-6 w-full flex-1"></div>
          <Link href="public/calculator">Calculator</Link>
          <div className="flex h-6 w-full flex-1"></div>
        </div>
        <div className="flex w-full justify-center">
          <Link href="/articles">Articles</Link>
        </div>

        <div className="sign-out-btn w-42 mt-2">
          {user.isLoaded && user.isSignedIn ? (
            <SignOutButton />
          ) : (
            <SignInButton />
          )}
        </div>
      </div>
    </>
  );
}

function MiniNav(props: {
  mini: Mini;
  setMini: Dispatch<SetStateAction<Mini>>;
}) {
  const { mini, setMini } = props;
  return (
    <nav className="flex h-fit px-4 pb-4 pt-3 md:hidden">
      {mini === "collapsed" ? (
        <CollapsedNav setMini={setMini} />
      ) : (
        <ExpandedNav setMini={setMini} />
      )}
    </nav>
  );
}

function CollapsedNav(props: { setMini: Dispatch<SetStateAction<Mini>> }) {
  const { setMini } = props;
  return (
    <div className="flex h-full w-full items-center justify-between">
      <HomeIcon />
      <div onClick={() => setMini("expanded")}>
        <ExpandIcon />
      </div>
    </div>
  );
}

function ExpandedNav(props: { setMini: Dispatch<SetStateAction<Mini>> }) {
  const { setMini } = props;

  return (
    <div className="mt-1 flex h-full w-full items-start justify-end text-xl">
      <div></div>
      <HomeIcon />
      <MiniNavButtons />
      <div onClick={() => setMini("collapsed")}>
        <CollapseIcon />
      </div>
    </div>
  );
}
